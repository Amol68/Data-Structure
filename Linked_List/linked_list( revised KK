class LL{
    
  private node head;
  private node tail;
  private int size;
  
    public LL(){
      this.size = 0;
    }
    
    public void getSize(){
        System.out.println("Linked List Size:" +size);
    }
  
    public void insertFirst(int value){
        node n1 = new node(value);
        n1.next=head;
        head=n1;
        
        if(tail==null){
            tail=head;
        }
        
        size += 1;
    }
    
    public void insertLast(int value){
        
        
        node n1 = new node(value);
        if(tail==null){
            insertFirst(value);
        }
        tail.next=n1;
        tail=n1;
        size= size+1;
    }
    
    public void insert(int value,int index){
        if(index==0){
            insertFirst(value);
            return;
        }
        
        if(index==size){
            insertLast(value);
        }
        
        node temp = head;
        
        for(int i=1; i<index; i++){
            temp = temp.next;
        }
        node n1 = new node(50,temp.next);
        temp.next=n1;
        size++;
        
    }
    
     public node get(int index){
         
          node n1 = head;
         for(int i=0; i<index;i++){
             n1 = n1.next;
         }
         return n1;
    }
    
    public int deleteFirst(){
        int value=head.data;
        head = head.next;
        if(head==null){
            tail=null;
        }
        size--;
        return value;
    }
    
    public int deleteLast(){
        if(size<=1){ 
           return deleteFirst();
        }
        
        node secondLast = get(size-2);
        int val = tail.data;
        tail=secondLast;
        tail.next=null;
        return val;
        
    }
    
    public void display(){
        node current = head;
        
        while(current!=null){
            System.out.print(current.data +"-->");
            current = current.next;
        }
        System.out.print("null");
        System.out.println();
    }
    
    private class node{
        private int data;
        private node next;
        
        public node(int data){
            this.data=data;
            this.next=null;
        }
        
        public node(int data,node next){
            this.data = data;
            this.next = next;
        }
    }

    public static void main(String[] args) {
        LL l1 = new LL();
        l1.insertFirst(4);
        l1.insertFirst(3);
        l1.insertFirst(2);
        l1.insertFirst(1);
        l1.insertLast(99);
        l1.insert(50,3);
        l1.display();
        l1.getSize();
        
        System.out.println( l1.deleteFirst());
        l1.display();
         
        System.out.println(l1.deleteLast());
        l1.display();   
        
    }
}


------->------->------->------->------->------->------->------->------->------->------->------->------->------->------->------->------->


class DoublyLL {
    
    private node head;
    private node tail;
    
    public void insertAtFirst(int value){
        node n1 = new node(value);
        n1.next=head;
        n1.prev=null;
        if(head!=null){
        head.prev=n1;
        }
        head=n1;
    }
    
    public node find(int value){
        
     node current = head;
     while(current!=null){
         if(current.data==value){
             return current;
         }
         current = current.next;
     }
     return null;
    }
    
    public void insertAtLast(int data){
        node n1 = new node(data);
        n1.next=null;  // irrespectively
        if(head==null){
            head=n1;
            n1.prev=null;
        }
        
        node last = head;
        while(last.next!=null){
            last = last.next;
        }
        
        n1.prev=last;
        last.next=n1;
        n1.next=null;
    }
    
    public void insertAfter(int after,int value){
        node p = find(after);
        if(p==null){
            System.out.println("does not exist");
            return;
        }
        node n1 = new node(value);
        n1.next=p.next;
        p.next=n1;
        n1.prev=p;
        if(n1.next!=null){
            n1.next.prev=n1;
        }
        
    }
    
    public void display(){
        node current = head;
        node last = null;
        
        while(current!=null){
            last=current;
            System.out.print(current.data+"-->");
            current=current.next;
        }
        System.out.print("null");
        
        System.out.println();
        
        // displaying linked-list in reverse order
        
         while(last!=null){
            System.out.print(last.data+"-->");
            last=last.prev;
        }
        System.out.print("END");
      System.out.println();
    }

    
    private class node{
        private int data;
        private node prev;
        private node next;
        
        public node(int data){
            this.data=data;
        }
        
         public node(int data,node prev,node next){
            this.data=data;
            this.next=next;
            this.prev=prev;
        }
    }
    
    public static void main(String[] args) {
      
      DoublyLL l1 = new DoublyLL();
      l1.insertAtFirst(5);
      l1.insertAtFirst(4);
      l1.insertAtFirst(3);
      l1.insertAtFirst(2);
      l1.insertAtFirst(1);
      l1.display();
      
      l1.insertAtLast(99);
      l1.display();
      l1.insertAfter(3,33);
      l1.display(); 
    }
}


---------->---------->---------->---------->---------->---------->---------->---------->---------->---------->---------->---------->


class CLL {
    
    private node head;
    private node tail;
    
    public void insertAtLast(int data){
         node n1 = new node(data);
         
         if(head==null){
             head=n1;
             tail=n1;
             return;
         }
         
         tail.next=n1;
         n1.next=head;
         tail=n1;
     
    }
    
    public void display(){
        node current = head;
        
        if(head!=null){
            do{
                System.out.print(current.data+"-->");
                current=current.next;
            }
            while(current!=head);
        }
        System.out.print("HEAD");
    }
    
   /* public CLL(){
        this.head=null;
        this.tail=null;
    } */
    
    public void delete(int value){
        
        node current = head;
        if(current==null){
            return;
        }
        if(current.data==value){
            head=head.next;
            tail.next=head;
        }
        
        do{
            node n = current.next;
            if(n.data==value){
                current.next=n.next;
                break;
            }
            n = n.next;
        }
        while(current!=head);
        
    }
    
    private class node{
        private int data;
        private node next;
        
        public node(int value){
            this.data=value;
        }
    }
    
    public static void main(String[] args){
        CLL list = new CLL();
        list.insertAtLast(3);
        list.insertAtLast(12);
        list.insertAtLast(7);
        list.display();
        
        list.delete(12);
        list.display();
    }
}

